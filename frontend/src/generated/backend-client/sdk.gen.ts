// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from '@hey-api/client-next';
import type { LoginData, LoginResponse, RefreshData, RefreshResponse, RefreshError, LogoutData, LogoutResponse, RegisterData, RegisterResponse, MeData, MeResponse, SocialAuthData, SocialAuthResponse, GetPlansData, GetPlansResponse, GetUserSubscriptionData, GetUserSubscriptionResponse, CreateCheckoutSessionData, CreateCheckoutSessionResponse, CancelSubscriptionData, CancelSubscriptionResponse, CreateCustomerPortalData, CreateCustomerPortalResponse, StripeWebhookData, TokenObtainPairData, TokenObtainPairResponse, TokenRefreshData, TokenRefreshResponse, TokenVerifyData, TokenVerifyResponse } from './types.gen';
import { zLoginResponse, zRefreshResponse, zLogoutResponse, zRegisterResponse, zMeResponse, zSocialAuthResponse, zGetPlansResponse, zGetUserSubscriptionResponse, zCreateCheckoutSessionResponse, zCancelSubscriptionResponse, zCreateCustomerPortalResponse, zTokenObtainPairResponse, zTokenRefreshResponse, zTokenVerifyResponse } from './zod.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Obtain Token
 */
export const login = <ThrowOnError extends boolean = false>(options: Options<LoginData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<LoginResponse, unknown, ThrowOnError>({
        responseValidator: async (data) => {
            return await zLoginResponse.parseAsync(data);
        },
        url: '/api/auth/login',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Refresh Token
 * Refresh access token using refresh token from cookie
 */
export const refresh = <ThrowOnError extends boolean = false>(options?: Options<RefreshData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<RefreshResponse, RefreshError, ThrowOnError>({
        responseValidator: async (data) => {
            return await zRefreshResponse.parseAsync(data);
        },
        url: '/api/auth/refresh',
        ...options
    });
};

/**
 * Logout
 * Logout user by clearing auth cookies
 */
export const logout = <ThrowOnError extends boolean = false>(options?: Options<LogoutData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<LogoutResponse, unknown, ThrowOnError>({
        responseValidator: async (data) => {
            return await zLogoutResponse.parseAsync(data);
        },
        url: '/api/auth/logout',
        ...options
    });
};

/**
 * Register
 */
export const register = <ThrowOnError extends boolean = false>(options: Options<RegisterData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<RegisterResponse, unknown, ThrowOnError>({
        responseValidator: async (data) => {
            return await zRegisterResponse.parseAsync(data);
        },
        url: '/api/auth/register',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get User
 * Get the current authenticated user's information
 */
export const me = <ThrowOnError extends boolean = false>(options?: Options<MeData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<MeResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        responseValidator: async (data) => {
            return await zMeResponse.parseAsync(data);
        },
        url: '/api/auth/me',
        ...options
    });
};

/**
 * Social Auth
 * Authenticate with social providers (Google, Facebook, etc.)
 */
export const socialAuth = <ThrowOnError extends boolean = false>(options: Options<SocialAuthData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<SocialAuthResponse, unknown, ThrowOnError>({
        responseValidator: async (data) => {
            return await zSocialAuthResponse.parseAsync(data);
        },
        url: '/api/auth/social',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get Plans
 * Get all available subscription plans
 */
export const getPlans = <ThrowOnError extends boolean = false>(options?: Options<GetPlansData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetPlansResponse, unknown, ThrowOnError>({
        responseValidator: async (data) => {
            return await zGetPlansResponse.parseAsync(data);
        },
        url: '/api/payments/plans',
        ...options
    });
};

/**
 * Get User Subscription
 * Get user's current subscription status
 */
export const getUserSubscription = <ThrowOnError extends boolean = false>(options?: Options<GetUserSubscriptionData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetUserSubscriptionResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        responseValidator: async (data) => {
            return await zGetUserSubscriptionResponse.parseAsync(data);
        },
        url: '/api/payments/subscription',
        ...options
    });
};

/**
 * Create Checkout Session
 * Create a Stripe checkout session for subscription
 */
export const createCheckoutSession = <ThrowOnError extends boolean = false>(options: Options<CreateCheckoutSessionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateCheckoutSessionResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        responseValidator: async (data) => {
            return await zCreateCheckoutSessionResponse.parseAsync(data);
        },
        url: '/api/payments/checkout',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Cancel Subscription
 * Cancel user's subscription
 */
export const cancelSubscription = <ThrowOnError extends boolean = false>(options: Options<CancelSubscriptionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CancelSubscriptionResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        responseValidator: async (data) => {
            return await zCancelSubscriptionResponse.parseAsync(data);
        },
        url: '/api/payments/cancel',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Create Customer Portal
 * Create a Stripe customer portal session
 */
export const createCustomerPortal = <ThrowOnError extends boolean = false>(options: Options<CreateCustomerPortalData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateCustomerPortalResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        responseValidator: async (data) => {
            return await zCreateCustomerPortalResponse.parseAsync(data);
        },
        url: '/api/payments/portal',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Stripe Webhook
 * Handle Stripe webhook events
 */
export const stripeWebhook = <ThrowOnError extends boolean = false>(options?: Options<StripeWebhookData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        url: '/api/payments/webhooks/stripe',
        ...options
    });
};

/**
 * Obtain Token
 */
export const tokenObtainPair = <ThrowOnError extends boolean = false>(options: Options<TokenObtainPairData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<TokenObtainPairResponse, unknown, ThrowOnError>({
        responseValidator: async (data) => {
            return await zTokenObtainPairResponse.parseAsync(data);
        },
        url: '/api/token/pair',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Refresh Token
 */
export const tokenRefresh = <ThrowOnError extends boolean = false>(options: Options<TokenRefreshData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<TokenRefreshResponse, unknown, ThrowOnError>({
        responseValidator: async (data) => {
            return await zTokenRefreshResponse.parseAsync(data);
        },
        url: '/api/token/refresh',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Verify Token
 */
export const tokenVerify = <ThrowOnError extends boolean = false>(options: Options<TokenVerifyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<TokenVerifyResponse, unknown, ThrowOnError>({
        responseValidator: async (data) => {
            return await zTokenVerifyResponse.parseAsync(data);
        },
        url: '/api/token/verify',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};