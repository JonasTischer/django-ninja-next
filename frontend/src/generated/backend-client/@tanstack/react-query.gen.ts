// This file is auto-generated by @hey-api/openapi-ts

import { type Options, login, refresh, logout, register, me, socialAuth, getPlans, getUserSubscription, createCheckoutSession, cancelSubscription, createCustomerPortal, stripeWebhook, tokenObtainPair, tokenRefresh, tokenVerify } from '../sdk.gen';
import { queryOptions, type UseMutationOptions, type DefaultError } from '@tanstack/react-query';
import type { LoginData, LoginResponse, RefreshData, RefreshError, RefreshResponse, LogoutData, LogoutResponse, RegisterData, RegisterResponse, MeData, SocialAuthData, SocialAuthResponse, GetPlansData, GetUserSubscriptionData, CreateCheckoutSessionData, CreateCheckoutSessionResponse, CancelSubscriptionData, CancelSubscriptionResponse, CreateCustomerPortalData, CreateCustomerPortalResponse, StripeWebhookData, TokenObtainPairData, TokenObtainPairResponse, TokenRefreshData, TokenRefreshResponse, TokenVerifyData, TokenVerifyResponse } from '../types.gen';
import { client as _heyApiClient } from '../client.gen';

export type QueryKey<TOptions extends Options> = [
    Pick<TOptions, 'baseUrl' | 'body' | 'headers' | 'path' | 'query'> & {
        _id: string;
        _infinite?: boolean;
    }
];

const createQueryKey = <TOptions extends Options>(id: string, options?: TOptions, infinite?: boolean): [
    QueryKey<TOptions>[0]
] => {
    const params: QueryKey<TOptions>[0] = { _id: id, baseUrl: (options?.client ?? _heyApiClient).getConfig().baseUrl } as QueryKey<TOptions>[0];
    if (infinite) {
        params._infinite = infinite;
    }
    if (options?.body) {
        params.body = options.body;
    }
    if (options?.headers) {
        params.headers = options.headers;
    }
    if (options?.path) {
        params.path = options.path;
    }
    if (options?.query) {
        params.query = options.query;
    }
    return [
        params
    ];
};

export const loginQueryKey = (options: Options<LoginData>) => createQueryKey('login', options);

export const loginOptions = (options: Options<LoginData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await login({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: loginQueryKey(options)
    });
};

export const loginMutation = (options?: Partial<Options<LoginData>>) => {
    const mutationOptions: UseMutationOptions<LoginResponse, DefaultError, Options<LoginData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await login({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const refreshQueryKey = (options?: Options<RefreshData>) => createQueryKey('refresh', options);

export const refreshOptions = (options?: Options<RefreshData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await refresh({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: refreshQueryKey(options)
    });
};

export const refreshMutation = (options?: Partial<Options<RefreshData>>) => {
    const mutationOptions: UseMutationOptions<RefreshResponse, RefreshError, Options<RefreshData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await refresh({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const logoutQueryKey = (options?: Options<LogoutData>) => createQueryKey('logout', options);

export const logoutOptions = (options?: Options<LogoutData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await logout({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: logoutQueryKey(options)
    });
};

export const logoutMutation = (options?: Partial<Options<LogoutData>>) => {
    const mutationOptions: UseMutationOptions<LogoutResponse, DefaultError, Options<LogoutData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await logout({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const registerQueryKey = (options: Options<RegisterData>) => createQueryKey('register', options);

export const registerOptions = (options: Options<RegisterData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await register({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: registerQueryKey(options)
    });
};

export const registerMutation = (options?: Partial<Options<RegisterData>>) => {
    const mutationOptions: UseMutationOptions<RegisterResponse, DefaultError, Options<RegisterData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await register({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const meQueryKey = (options?: Options<MeData>) => createQueryKey('me', options);

export const meOptions = (options?: Options<MeData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await me({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: meQueryKey(options)
    });
};

export const socialAuthQueryKey = (options: Options<SocialAuthData>) => createQueryKey('socialAuth', options);

export const socialAuthOptions = (options: Options<SocialAuthData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await socialAuth({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: socialAuthQueryKey(options)
    });
};

export const socialAuthMutation = (options?: Partial<Options<SocialAuthData>>) => {
    const mutationOptions: UseMutationOptions<SocialAuthResponse, DefaultError, Options<SocialAuthData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await socialAuth({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getPlansQueryKey = (options?: Options<GetPlansData>) => createQueryKey('getPlans', options);

export const getPlansOptions = (options?: Options<GetPlansData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getPlans({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getPlansQueryKey(options)
    });
};

export const getUserSubscriptionQueryKey = (options?: Options<GetUserSubscriptionData>) => createQueryKey('getUserSubscription', options);

export const getUserSubscriptionOptions = (options?: Options<GetUserSubscriptionData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getUserSubscription({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getUserSubscriptionQueryKey(options)
    });
};

export const createCheckoutSessionQueryKey = (options: Options<CreateCheckoutSessionData>) => createQueryKey('createCheckoutSession', options);

export const createCheckoutSessionOptions = (options: Options<CreateCheckoutSessionData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await createCheckoutSession({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: createCheckoutSessionQueryKey(options)
    });
};

export const createCheckoutSessionMutation = (options?: Partial<Options<CreateCheckoutSessionData>>) => {
    const mutationOptions: UseMutationOptions<CreateCheckoutSessionResponse, DefaultError, Options<CreateCheckoutSessionData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await createCheckoutSession({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const cancelSubscriptionQueryKey = (options: Options<CancelSubscriptionData>) => createQueryKey('cancelSubscription', options);

export const cancelSubscriptionOptions = (options: Options<CancelSubscriptionData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await cancelSubscription({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: cancelSubscriptionQueryKey(options)
    });
};

export const cancelSubscriptionMutation = (options?: Partial<Options<CancelSubscriptionData>>) => {
    const mutationOptions: UseMutationOptions<CancelSubscriptionResponse, DefaultError, Options<CancelSubscriptionData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await cancelSubscription({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const createCustomerPortalQueryKey = (options: Options<CreateCustomerPortalData>) => createQueryKey('createCustomerPortal', options);

export const createCustomerPortalOptions = (options: Options<CreateCustomerPortalData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await createCustomerPortal({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: createCustomerPortalQueryKey(options)
    });
};

export const createCustomerPortalMutation = (options?: Partial<Options<CreateCustomerPortalData>>) => {
    const mutationOptions: UseMutationOptions<CreateCustomerPortalResponse, DefaultError, Options<CreateCustomerPortalData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await createCustomerPortal({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const stripeWebhookQueryKey = (options?: Options<StripeWebhookData>) => createQueryKey('stripeWebhook', options);

export const stripeWebhookOptions = (options?: Options<StripeWebhookData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await stripeWebhook({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: stripeWebhookQueryKey(options)
    });
};

export const stripeWebhookMutation = (options?: Partial<Options<StripeWebhookData>>) => {
    const mutationOptions: UseMutationOptions<unknown, DefaultError, Options<StripeWebhookData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await stripeWebhook({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const tokenObtainPairQueryKey = (options: Options<TokenObtainPairData>) => createQueryKey('tokenObtainPair', options);

export const tokenObtainPairOptions = (options: Options<TokenObtainPairData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await tokenObtainPair({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: tokenObtainPairQueryKey(options)
    });
};

export const tokenObtainPairMutation = (options?: Partial<Options<TokenObtainPairData>>) => {
    const mutationOptions: UseMutationOptions<TokenObtainPairResponse, DefaultError, Options<TokenObtainPairData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await tokenObtainPair({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const tokenRefreshQueryKey = (options: Options<TokenRefreshData>) => createQueryKey('tokenRefresh', options);

export const tokenRefreshOptions = (options: Options<TokenRefreshData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await tokenRefresh({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: tokenRefreshQueryKey(options)
    });
};

export const tokenRefreshMutation = (options?: Partial<Options<TokenRefreshData>>) => {
    const mutationOptions: UseMutationOptions<TokenRefreshResponse, DefaultError, Options<TokenRefreshData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await tokenRefresh({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const tokenVerifyQueryKey = (options: Options<TokenVerifyData>) => createQueryKey('tokenVerify', options);

export const tokenVerifyOptions = (options: Options<TokenVerifyData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await tokenVerify({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: tokenVerifyQueryKey(options)
    });
};

export const tokenVerifyMutation = (options?: Partial<Options<TokenVerifyData>>) => {
    const mutationOptions: UseMutationOptions<TokenVerifyResponse, DefaultError, Options<TokenVerifyData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await tokenVerify({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};